#include <time.h>
#include "Server_child.h"
#include "Routine_server.h"
 

/*
	Crea un descrittore per il socket 
*/

int create_socket(int pid_client )
{

	int fdsrv;
	fdsrv=socket(AF_UNIX,SOCK_STREAM,0);

	return fdsrv;
}


/*
Questa funzione serve per tentare una connessione al socket creato dal client 
Se ci riesce restituisce l'id corrispondente al socket , altrimenti restituirà un valore 
che notifica l'impossibilità di connettersi al socket (per esempio se il client non l'ha ancora creato)
*/



int configure_connect(int fdsrv){ 

	int lensrv;
	char abs_sock_path[ABS_PATH_LENGTH];  // 108 max_strlenght per la stringa un.sun_path
	struct  sockaddr_un unsrv;


	unsrv.sun_family=AF_UNIX;
	strcat(abs_sock_path,SOCKS_PATH);
	strcat(abs_sock_path,"%d.sock",pid_client);
	strcpy(un.sun_path,abs_sock_path);
	lensrv=offsetof(struct sockaddr_un ,sunpath) + strlen(abs_sock_path);
	connect(fdsrv,(struct sockaddr *)&unsrv , lensrv);

	return fdsrv;

}

/* 

 la funzione serve per compilare i campi rimanenti all'interno della fattura che deve essere spedita al client
 Queste sono le due equazioni che calcolano una il numero di turo l'altra il costo della visita
 turn = n_Seq - prior + MAX_PRIOR dove MAX_PRIOR=4 
 price = visit + (prior * cst_prior);
*/	

void compile_invoice(struct invoice * in , struct config * conf , int n_seq)
{

	int visit_price ,n_turn;

	n_turn = n_seq - (in->priority)	+ MAX_PRIOR ;
	
	if(kindof_service==OPHTHALMOLOGY){
	
		visite_price = conf->ophtha + (in->priority*cst_prior);
	}
	else if (kindof_service==ORTHOPEDICS){
	
		visite_price = conf->orto + (in->priority*cst_prior);
	}
	else{

		visite_price = conf->ophtha + (in->priority*cst_prior);	
	}

	in->turn=n_turn;
	in->price=visite_price;

}


La ringraziamo per aver usato il nostro servizio. Questa è la sua fattura




























